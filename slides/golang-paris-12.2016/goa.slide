goa, une approche innovante pour le développement de microservices en Go.
Raphaël Simon -- Golang Paris, 13 Décembre 2016
Tags: goa, golang, microservices, french

https://goa.design
https://gophers.slack.com/messages/goa/
raphael@goa.design
@rgsimon

* goa

Raphaël Simon – Chef Architecte, RightScale

- Impliqué dans la conception et l'intégration de nombreuses APIs
- Subi les conséquences dans les deux cas...

.image ./images/0_rightscale-team.jpg 358 _

* Difficultés de la Conception d'API

- processus itératif qui requiert la participation de plusieurs parties prenantes
- nécessite l'accès à une documentation constamment mise à jour
- les détails sont importants, comment garantir qu'ils ne se perdent pas?

* goa

Le but de goa est de permettre:

- aux développeurs de ne pas avoir à répèter chaque décision prise lors de la conception dans le code ainsi que dans la documentation
- aux parties prenantes de pouvoir constamment revoir ces décisions et d'avoir la certitude qu'elles seront bien implémentées

.image ./images/transparent.png 1 1
.image ./images/goa-logo.svg 180 _

* Design d'API avec goa

goa permet de décrire les paramètres de l'API avec un DSL Go. La description contient:

- les types utilisés pour passer les données en entrée et en sortie
- les caractéristiques HTTP de chaque appel

À peu près équivalent à Swagger mais avec la commodité de Go.

* Exemple

.code ./code/design.go

* goagen

goagen transforme le DSL du design en plusieurs produits de la génération automatique.

.code ./code/goagen.txt

* Génération de Code (1)

Le mécanisme de génération supporte la nature itérative du design d'API:

- Le code généré interagit avec le code utilisateur a travers des interfaces Go explicites.
- Les changements de design se traduisent par des mises à jour intuitives des structures de donnée et des interfaces.

* Génération de Code (2)

Le code généré inclu:

- la validation des données en entrée
- le "unmarshaling" en structures correspondantes au design
- le code nécessaire à la formation de la réponse HTTP
- des clients Go et JavaScript
- un outil client en ligne de commande
- une documentation a travers une spécification Swagger et du JSON Schema
- d'autres produits implémentés a travers des plugins utilisateurs

Le code utilisateur est donc centré sur la logique spécifique au problème résolu par le service plutôt que sur la plomberie nécessaire à son fonctionnement.

* goa et le Monde Des Microservices

L'utilisation d'un DSL Go a plusieurs conséquences intéressantes:

- Certaines parties du design peuvent etre partagées entre plusieurs APIs (permettant par exemple la réutilisation de types).
- Un design peut être implémenté par plusieurs services (intéressant lors de la conception de systèmes suivant l'architecture CQRS par exemple).
- Le DSL peut être étendu de manière simple (plugin).

* goa, Le Projet

- license MIT, https://github.com/goadesign
- communauté active et en pleine croissance
- en production dans plusieurs entreprises

Rejoignez-nous!

- site web: https://goa.design
- slack: https://gophers.slack.com/messages/goa/
